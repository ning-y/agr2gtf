#!/usr/bin/env Rscript

suppressPackageStartupMessages({
  library(argparse)
  library(rtracklayer)
  library(tidyverse)})

DESCRIPTION <- str_c(
  "Add gene type records to a GTF file, overwriting previous existing gene ",
  "type records, inferring gene from gene_id of existing non-gene type ",
  "records.")
KEEP_ATTRIBUTES_HELP <- str_c(
  "Comma-delimited list of attributes to keep, in addition to gene_id. ",
  "The value of an attribute in a newly constructed gene type record is the ",
  "comma-delimited list of unique values for that attribute for all non-gene ",
  "type records in the input GTF with that the same gene_id.")

main <- function() {
  parser <- ArgumentParser(description=DESCRIPTION)
  parser$add_argument("input", help="Input GTF file")
  parser$add_argument(
    "--keep-attributes", help=KEEP_ATTRIBUTES_HELP,
    default="gene_name,gene_type,tag")
  parser$add_argument("output", help="Output GTF file")
  args <- parser$parse_args()
  export.gff2(
    agr2gtf(args$input, str_split_1(args$`keep-attributes`)),
    args$output)
}

agr2gtf <- function(gtf_in, keep_attributes) {
  # Check and account for possibly empty gene_id
  stopifnot("gene_id" %in% colnames(mcols(gtf)))
  is_na_gene <- is.na(mcols(gtf)$gene_id)
  if (any(is_na_gene))
    warning(str_glue(
      "{x} of total {y} rows have no gene_id; these will be skipped...",
      x=sum(is_na_gene), y=length(is_na_gene)))
  gtf_bygene <- split(gtf, mcols(gtf)$gene_id)

  # Check and account for genes on different chromosomes and strands
  has_multiple_seq_strand <- gtf_bygene %>%
    map_lgl(~length(unique(seqnames(.x))) != 1 || length(unique(strand(.x))) != 1)
  if (any(has_multiple_seq_strand))
    warning(str_glue(
      "{x} of total {y} genes lie on multiple sequences or strands; ",
      "these will be skipped",
      x=sum(has_multiple_seq_strand), y=length(has_multiple_seq_strand)))
  gtf_bygene_sameseqstrand <- subset(gtf_bygene, !has_multiple_seq_strand)

  # Check and account for pre-existing rows of type "gene"
  has_row_with_gene_type <- gtf_bygene_sameseqstrand %>%
    map_lgl(~"gene" %in% mcols(.x)$type)
  if (any(has_row_with_gene_type))
    warning(str_glue(
      "{x} of total {y} genes already have a \"gene\" feature; overwriting...",
      x=sum(has_row_with_gene_type, na.rm=TRUE),
      y=length(has_row_with_gene_type)))
  gtf_bygene_sans_generow <- gtf_bygene_sameseqstrand %>%
    map(~subset(.x, mcols(.x)$type != "gene"))

  # Create a row of type "gene" and populate some of its mcols. I don't use
  # GenomicRanges::union because that only takes the union of overlapping ranges,
  # but a gene can have non-overlapping transcripts. For example, human novel
  # transcript ENSG00000290385.1 has non-overlapping transcripts ENST00000440163.1
  # and ENST00000455464.7.
  gtf_genes_sans_mcols <- gtf_bygene_sans_generow %>%
    map(
    ~GRanges(
      seqnames=unique(seqnames(.x)),
      ranges=IRanges(min(start(.x)), max(end(.x))),
      strand=unique(strand(.x))))
  gtf_genes_mcols_only <- gtf_bygene_sans_generow %>%
    names() %>%
    map(function(.name) {
      .mcols_orig <- gtf_bygene_sans_generow[[.name]] %>% as_tibble()
      .mcol_new <- tibble(
        source=.mcols_orig$source %>% unique() %>% str_flatten(","),
        type="gene", gene_id=.name)
      for (att in keep_attributes) {
        .mcol_new[[att]] <- .mcols_orig[[att]] %>% unique() %>% str_flatten(",")}
      .mcol_new })
  gtf_genes <- pmap(
    list(gtf_genes_sans_mcols, gtf_genes_mcols_only),
    function(.x, .y) { mcols(.x) <- .y; .x })

  # Interleave the new gene rows into original non-gene rows
  gtf_bygene_with_generow <- pmap(
    list(gtf_genes, gtf_bygene_sans_generow), c)

  gtf_bygene_with_generow
}

if (sys.nframe() == 0) { main() }
